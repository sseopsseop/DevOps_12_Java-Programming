package chap23_stream;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class _05_UsefulMethod {
	public static void main(String[] args) {
		List<Integer> intList = new ArrayList<>();
		
		for(int i = 0; i < 10; ++i) {
			intList.add((int)(Math.random() * 10) + 1);
		}
		
		// 1. forEach : Stream 요소에 하나씩 접근하여 작성한 코드를 실행
		// Stream에 담겨있는 요스의 개수만큼 코드가 실행된다.
		// 최종단계 메소드이고 리턴 값이 없다.
		intList.stream()
			   .forEach(num -> System.out.println(num));
		
		System.out.println("---------------------------");
		intList.stream()
			   .forEach(num ->{
				   if(num % 2 == 0)
					   System.out.println(num);
			   });

		System.out.println("---------------------------");
		// 2. filter : Stream의 요소 중 특정 조건에 만족하는 요소들만 모아서 새로운 Stream을 리턴
		// 중간단계 메소드, 람다식을 구성할 때 구현부에 true나 false가 리턴되도록 비교식이나 조건식을 사용한다.
		
		intList.stream()
				// 5보다 큰 숫자만 모아서 Stream<Integer> 형태로 리턴
			   .filter(num -> num > 5)
			   .forEach(num -> System.out.println(num));
		
		System.out.println("---------------------------");
		
		// int배열 두 개 선언해서
		// 첫 번째 배열에서 두 번째 배열에 있는 값 제거한 후 출력
		// Set, filter, forEach 사용
		int[] intArr1 = {1,5,6,9,8,10};
		int[] intArr2 = {5,8,8,7,9,10,10};
		
		Set<Integer> set = new HashSet<>();
		for(int i = 0; i < intArr1.length; ++i) {
			set.add(intArr2[i]);
		}
		Arrays.stream(intArr1)
			  .filter(num-> !set.contains(num))
			  .forEach(num -> System.out.println(num));
	
	}
}
